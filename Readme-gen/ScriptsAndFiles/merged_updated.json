[
  {
    "description": "5Chan is a Next.js-based platform that allows users to share and receive anonymous feedback in a safe manner. Non-logged-in users can provide feedback for others, while logged-in users can receive feedback after completing OTP verification during signup. The platform includes server-side rendering, SEO optimization, and integrates with Gemini API for enhanced user experience.",
    "project_live_link": "https://5-chan-shardendu-mishra.vercel.app",
    "project_name": "5Chan",
    "project_repository": "https://github.com/MishraShardendu22/5Chan",
    "project_video": "https://youtu.be/FIjMpPrWSkM",
    "skills": [
      "Next.js",
      "React",
      "TypeScript",
      "Tailwind CSS",
      "Node.js",
      "MongoDB",
      "Mongoose",
      "NextAuth",
      "Nodemailer",
      "Zod",
      "Google Generative AI",
      "Embla Carousel",
      "Radix UI",
      "React Hook Form",
      "bcryptjs",
      "Axios"
    ],
    "small_description": "A feedback platform where users can share and receive anonymous feedback with OTP verification"
  },
  {
    "description": "AI-Agent-Ticketing is a MERN stack application that provides a comprehensive ticketing system with intelligent automation. The platform uses Agentic AI to analyze ticket descriptions, extract relevant skills, and automatically assign the most suitable moderators. It features Inngest for background workflow orchestration, user authentication, and automated email notifications for ticket routing and moderator assignments.",
    "project_live_link": "",
    "project_name": "AI-Agent-Ticketing",
    "project_repository": "https://github.com/MishraShardendu22/AI-Agent-Ticketing",
    "project_video": "",
    "skills": [
      "React",
      "Vite",
      "Express.js",
      "Node.js",
      "MongoDB",
      "Mongoose",
      "Inngest",
      "Agentic AI",
      "JWT",
      "bcrypt",
      "Nodemailer",
      "Tailwind CSS",
      "DaisyUI",
      "React Router",
      "React Markdown"
    ],
    "small_description": "A full-stack ticketing platform with AI-powered ticket analysis and automated moderator assignment"
  },
  {
    "description": "AI-Chat-Bot is a chatbot application that provides a ChatGPT-like experience using Google's Gemini API. The application features a modern React frontend with smooth animations powered by Framer Motion, Redux Toolkit for state management, and an Express.js backend that handles API communication with Gemini. The project is deployed on Render and includes features like real-time chat, toast notifications, and responsive design.",
    "project_live_link": "https://ai-front-yrlv.onrender.com",
    "project_name": "AI-Chat-Bot",
    "project_repository": "https://github.com/MishraShardendu22/AI-Chat-Bot",
    "project_video": "https://www.youtube.com/watch?v=Wu40H6P1f8Y",
    "skills": [
      "React",
      "Vite",
      "Express.js",
      "Node.js",
      "MongoDB",
      "Mongoose",
      "Google Generative AI",
      "Redux Toolkit",
      "Framer Motion",
      "Tailwind CSS",
      "Axios",
      "React Hot Toast",
      "React Toastify",
      "CORS",
      "Nodemon"
    ],
    "small_description": "A ChatGPT-like chatbot built with Gemini API and modern web technologies"
  },
  {
    "description": "This Project has been contribute to open source for keploy API Hub repo https://github.com/keploy/public-apis-collection?tab=readme-ov-file#anime--manga it was included as the only solo dev project that has been inlcuded in hte repo of keploy as a free api , it was raised as a project and later merged after the mentors praised it a lot https://github.com/keploy/public-apis-collection/pull/105  is a comprehensive documentation platform built with Nextra that showcases two different types of APIs: a Project Management System using SOAP and a Dragon Ball API using REST. The project demonstrates versatility in working with both SOAP and REST APIs in a single application, featuring complete CRUD operations, intuitive interfaces for managing projects, and character information from the Dragon Ball universe.",
    "project_live_link": "https://api-documentation-git-main-shardendu-mishra-s-projects.vercel.app/",
    "project_name": "API-Documentation",
    "project_repository": "https://github.com/MishraShardendu22/API-Documentation",
    "project_video": "",
    "skills": [
      "Next.js",
      "Nextra",
      "React",
"Jest and Supertest",
"OpenAPI and Swagger UI",
"Keploy Tetsing tools",
"CI/CD",
      "TypeScript",
      "Tailwind CSS",
      "REST",
      "GraphQL",
      "Apollo",
      "Vite",
      "Bootstrap"
    ],
    "small_description": "A comprehensive API documentation hub showcasing both SOAP and REST APIs"
  },
  {
    "description": "BloodBank-IIT-Dharwad is a full-stack blood bank management platform developed during a 36-hour hackathon. It features a React and TypeScript frontend, a backend built with both TypeScript (Node.js/Express) and GoLang microservices, and MongoDB for data storage. The system supports user authentication, scheduling, notifications, and advanced workflow integration, with a focus on security and performance.",
    "project_live_link": "https://parshu-velocity-blood-bank.vercel.app",
    "project_name": "BloodBank-IIT-Dharwad-Original",
    "project_repository": "https://github.com/MishraShardendu22/BloodBank-IIT-Dharwad-Original",
    "project_video": "",
    "skills": [
      "React",
      "TypeScript",
      "Vite",
      "Express.js",
      "Node.js",
      "MongoDB",
      "Mongoose",
      "GoLang",
      "Fiber",
      "JWT",
      "bcryptjs",
      "Nodemailer",
      "Node Cron",
      "Zustand",
      "Radix UI",
      "Tailwind CSS",
      "DaisyUI",
      "Axios",
      "React Toastify"
    ],
    "small_description": "A comprehensive blood bank management system built during a hackathon at IIT Dharwad"
  },
  {
    "description": "BloodBank is a full-stack web application designed to streamline blood donation processes. The project features a React frontend with TypeScript, Vite, and comprehensive UI components from Radix UI, along with an Express.js backend with TypeScript. The system includes user authentication, blood donation management, and modern UI with dark mode support and animations.",
    "project_live_link": "",
    "project_name": "BloodBank",
    "project_repository": "https://github.com/MishraShardendu22/BloodBank",
    "project_video": "",
    "skills": [
      "React",
      "TypeScript",
      "Vite",
      "Express.js",
      "Node.js",
      "MongoDB",
      "Mongoose",
      "Redux Toolkit",
      "Zustand",
      "Radix UI",
      "Tailwind CSS",
      "Framer Motion",
      "React Hook Form",
      "Zod",
      "JWT",
      "bcryptjs",
      "Axios"
    ],
    "small_description": "A blood bank management system to ease the blood donation process"
  },
  {
    "description": "Boxit is a Next.js application built with modern web technologies including TypeScript, Tailwind CSS, and Radix UI components. The project features Clerk authentication, Drizzle ORM for database management, ImageKit integration for media handling, and comprehensive form handling with React Hook Form and Zod validation. The application includes advanced UI components and database migration tools.",
    "project_live_link": "https://droply-shardendu.vercel.app/",
    "project_name": "Boxit",
    "project_repository": "https://github.com/MishraShardendu22/Boxit",
    "project_video": "",
    "skills": [
      "Next.js",
      "React",
      "TypeScript",
      "Tailwind CSS",
      "Drizzle ORM",
      "Clerk",
      "Radix UI",
      "ImageKit",
      "React Hook Form",
      "Zod",
      "Neon Database",
      "Axios",
      "Framer Motion",
      "Embla Carousel"
    ],
    "small_description": "A Next.js application with modern UI components and database integration"
  },
  {
    "description": "ChatBot-Pakcage provides a custom, reusable chatbot widget as an npm package for React applications, along with a Go backend for real-time chat and Redis integration. The package is designed for easy integration into any React project, supporting unique user sessions and scalable backend communication. The Go backend leverages Fiber and Redis for efficient, concurrent chat handling.",
    "project_live_link": "",
    "project_name": "ChatBot-Pakcage",
    "project_repository": "https://github.com/MishraShardendu22/chatbot-widget",
    "project_video": "",
    "skills": [
      "React",
      "TypeScript",
      "Vite",
      "Rollup",
      "GoLang",
      "Fiber",
      "Redis",
      "UUID"
    ],
    "small_description": "A plug-and-play chatbot widget and Go backend for real-time chat integration"
  },
  {
    "description": "Dhvani is a comprehensive health management platform integrating multiple microservices built with Go, Node.js, and Python, and a React-based frontend. It offers user and organization management, blood bank operations, an AI-powered chatbot, AI-driven medical image analysis (including TB detection), and personalized nutrition advice. The system features role-based dashboards, secure authentication, and advanced analytics, leveraging MongoDB and Redis for data storage and caching.",
    "project_live_link": "https://dhvani.mayankdev.com/",
    "project_name": "Dhvani",
    "project_repository": "https://github.com/MishraShardendu22/Dhvani",
    "project_video": "https://www.youtube.com/watch?v=HUO7M2HzqjY",
    "skills": [
      "React",
      "TypeScript",
      "Vite",
      "Tailwind CSS",
      "Shadcn/UI",
      "Framer Motion",
      "Zustand",
      "Leaflet",
      "Recharts",
      "Node.js",
      "Express.js",
      "MongoDB",
      "Mongoose",
      "JWT",
      "Bcryptjs",
      "Nodemailer",
      "Multer",
      "GoLang",
      "Fiber",
      "Redis",
      "Google Gemini API",
      "DeepSeek API",
      "OpenAI API",
      "Python",
      "Flask",
      "PyTorch",
      "Torchvision",
      "OpenCV",
      "Hugging Face Hub",
      "Grad-CAM"
    ],
    "small_description": "A multi-service health management platform with AI, nutrition, and blood bank modules"
  },
  {
    "description": "DiscountCoupon-LLD is a C++ project that implements the low-level design of a discount coupon system. The codebase demonstrates object-oriented design principles for managing coupons, applying discounts, and handling user interactions. The project is structured for clarity and extensibility, suitable for educational and interview preparation purposes.",
    "project_live_link": "",
    "project_name": "DiscountCoupon-LLD",
    "project_repository": "https://github.com/MishraShardendu22/DiscountCoupon-LLD",
    "project_video": "",
    "skills": [
      "C++"
    ],
    "small_description": "A C++ implementation of a discount coupon system (Low-Level Design)"
  },
  {
    "description": "Djando-NotesApplication is a simple web app for managing notes, built with Django and featuring a modern frontend using TypeScript, Tailwind CSS, and Shadcn UI. The app supports creating, reading, updating, and deleting notes, and is designed for responsiveness and ease of use. It is suitable for learning and demonstration purposes.",
    "project_live_link": "https://frontend-okmy.onrender.com",
    "project_name": "Djando-NotesApplication",
    "project_repository": "https://github.com/MishraShardendu22/Django-NotesApplication",
    "project_video": "https://youtu.be/DkfKO5gsNRM",
    "skills": [
      "Django",
      "TypeScript",
      "Tailwind CSS",
      "Shadcn UI",
      "Choreo"
    ],
    "small_description": "A Django-based notes application with CRUD operations and modern UI"
  },
  {
    "description": "Docker-Project-1 is a basic Express.js web application that serves as a learning project for Docker containerization. The project demonstrates Docker fundamentals including containerization, port mapping, and deployment. It features a simple landing page that navigates to the developer's GitHub account and showcases Docker's isolation, portability, and scalability features.",
    "project_live_link": "https://hub.docker.com/r/shardendumishra22/projectdocker",
    "project_name": "Docker-Project-1",
    "project_repository": "https://github.com/MishraShardendu22/Docker-Project-1",
    "project_video": "https://www.youtube.com/watch?v=mW05kehUOgQ",
    "skills": [
      "Docker",
      "Express.js",
      "Node.js",
      "CORS",
      "Containerization"
    ],
    "small_description": "A simple Express.js application containerized with Docker for learning purposes"
  },
  {
    "description": "Dragon-Ball-Api is a comprehensive REST API built with Express.js and TypeScript for managing Dragon Ball trivia. It features MongoDB integration with Mongoose, JWT-based authentication for admin actions, OpenAPI/Swagger documentation, and AI-powered testing with Keploy. The API supports full CRUD operations, includes GitHub Actions CI/CD, and provides both public and admin-only endpoints for managing Dragon Ball questions and series data.",
    "project_live_link": "https://dragon-ball-api-grlr.onrender.com/",
    "project_name": "Dragon-Ball-Api",
    "project_repository": "https://github.com/MishraShardendu22/Dragon-Ball-Api",
    "project_video": "https://www.youtube.com/watch?v=W11A4M4QZgU",
    "skills": [
      "Express.js",
      "TypeScript",
      "MongoDB",
      "Mongoose",
      "JWT",
      "Swagger",
      "OpenAPI",
      "Keploy",
      "Jest",
      "Supertest",
      "GitHub Actions",
      "CORS",
      "Rate Limiting",
      "Nodemon"
    ],
    "small_description": "A RESTful API for Dragon Ball trivia with JWT authentication and comprehensive testing"
  },
  {
    "description": "DragonBallAPI-GoLang is a high-performance REST API built with Go and the Fiber framework, providing comprehensive DragonBall data including characters, arcs, and episodes. This is an advanced version of the TypeScript-based DragonBall API, optimized for performance and scalability. The API is free to use and can be integrated with any frontend application.",
    "project_live_link": "https://dragonballapi-golang-1qjq.onrender.com",
    "project_name": "DragonBallAPI-GoLang",
    "project_repository": "https://github.com/MishraShardendu22/DragonBallAPI-GoLang",
    "project_video": "",
    "skills": [
      "GoLang",
      "Fiber",
      "MongoDB",
      "REST API",
      "Air (Hot Reload)"
    ],
    "small_description": "A Go-based REST API for DragonBall character and episode data using Fiber framework"
  },
  {
    "description": "Entrepreneurr is a modern web platform built with Next.js and Sanity.io that enables entrepreneurs to showcase their startups and connect with the community. The application features a headless CMS for content management, SEO optimization, and a responsive design using Tailwind CSS and ShadCN components. It provides a seamless, visually stunning experience for startup discovery and networking.",
    "project_live_link": "https://entrepreneurr.vercel.app/",
    "project_name": "Entrepreneurr",
    "project_repository": "https://github.com/MishraShardendu22/Entrepreneurr",
    "project_video": "https://www.youtube.com/watch?v=IQYN3xf0xl4",
    "skills": [
      "Next.js",
      "React",
      "TypeScript",
      "Sanity.io",
      "Tailwind CSS",
      "ShadCN",
      "Radix UI",
      "NextAuth",
      "Framer Motion",
      "Embla Carousel",
      "React Hook Form",
      "Zod",
      "Axios",
      "Markdown",
      "Styled Components"
    ],
    "small_description": "A platform for entrepreneurs to showcase startups and connect with like-minded individuals"
  },
  {
    "description": "Full-Stack-Next-JS is a complete authentication system built with Next.js, featuring user registration, login, logout, and email verification. The project integrates MongoDB Atlas for data persistence, uses JWT for authentication, bcryptjs for password hashing, and Nodemailer for email verification. It includes comprehensive API testing with Postman and features a modern UI built with Tailwind CSS, Radix UI components, and Framer Motion animations.",
    "project_live_link": "https://nextauth-git-main-shardendu-mishra.vercel.app/",
    "project_name": "Full-Stack-Next-JS",
    "project_repository": "https://github.com/MishraShardendu22/Full-Stack-Next-JS",
    "project_video": "https://www.youtube.com/watch?v=PFyRt7OilPY",
    "skills": [
      "Next.js",
      "React",
      "TypeScript",
      "MongoDB",
      "Mongoose",
      "JWT",
      "bcryptjs",
      "Nodemailer",
      "Tailwind CSS",
      "Radix UI",
      "Framer Motion",
      "Axios",
      "React Hot Toast",
      "React Toastify",
      "Postman"
    ],
    "small_description": "A Next.js authentication system with MongoDB integration and comprehensive API testing"
  },
  {
    "description": "FullStack-Mini-Projects is a collection of mini applications that demonstrate the integration of front-end and back-end technologies. The project includes various sub-projects like 'Making Models', 'Template', and 'Jokes On You', each showcasing different aspects of full-stack development using Node.js, Express, and Axios for seamless front-end and back-end communication.",
    "project_live_link": "https://integrating-front-and-backend.onrender.com/",
    "project_name": "FullStack-Mini-Projects",
    "project_repository": "https://github.com/MishraShardendu22/FullStack-Mini-Projects",
    "project_video": "",
    "skills": [
      "Node.js",
      "Express",
      "Axios",
      "Full-Stack Development"
    ],
    "small_description": "A collection of full-stack mini projects demonstrating front-end and back-end integration"
  },
  {
    "description": "GitHub-Cleaner-Go is a Go-based utility that automates the cleanup of unused UI components from React repositories. It clones repositories from GitHub, analyzes package.json files to identify React projects, scans for unused components in the ui directory, removes them, and automatically commits the changes. The tool uses GitHub's REST API and Git commands to streamline repository maintenance.",
    "project_live_link": "",
    "project_name": "GitHub-Cleaner-Go",
    "project_repository": "https://github.com/MishraShardendu22/GitHub-Cleaner-Go",
    "project_video": "",
    "skills": [
      "GoLang",
      "GitHub API",
      "Git",
      "File System Operations",
      "Regular Expressions",
      "JSON Parsing",
      "HTTP Requests"
    ],
    "small_description": "A Go utility for cleaning unused UI components from React repositories"
  },
  {
    "description": "Go-TransferScript is a Go-based automation tool for transferring multiple GitHub repositories between personal accounts or organizations. It uses Go routines for parallel processing, Resty for optimized HTTP requests, and includes automatic retry mechanisms. The script reads GitHub tokens from environment variables and provides a lightweight solution for developers managing multiple GitHub accounts, especially useful for moving repositories from learning accounts to project accounts.",
    "project_live_link": "",
    "project_name": "Go-TransferScript",
    "project_repository": "https://github.com/MishraShardendu22/Go-TransferScript",
    "project_video": "https://www.youtube.com/watch?v=0Rhfgxg6YyE",
    "skills": [
      "GoLang",
      "GitHub API",
      "Resty",
      "GoDotEnv",
      "Concurrent Programming",
      "HTTP Requests",
      "Environment Variables",
      "Automation"
    ],
    "small_description": "A Go script for automating GitHub repository transfers between accounts"
  },
  {
    "description": "GoLang-Blog is a full-stack blog platform featuring a Go backend with MongoDB integration and a React frontend. The application includes user authentication with OTP verification, CRUD operations for blog posts, and secure email functionality using Go's net/smtp package. The frontend is built with React, Tailwind CSS, and Vite for optimal development experience and performance.",
    "project_live_link": "https://frontend-goblog.onrender.com",
    "project_name": "GoLang-Blog",
    "project_repository": "https://github.com/MishraShardendu22/GoLang-Blog",
    "project_video": "",
    "skills": [
      "GoLang",
      "React",
      "MongoDB",
      "Mongoose",
      "Tailwind CSS",
      "Vite",
      "SMTP",
      "OTP",
      "CRUD Operations",
      "User Authentication"
    ],
    "small_description": "A full-stack blog platform built with Go backend and React frontend"
  },
  {
    "description": "GoLang-Practise-API is a RESTful API practice project built with Go and Gorilla Mux router. It implements a course management system with full CRUD operations including GET, POST, PUT, PATCH, and DELETE endpoints. The API handles JSON data, includes proper error handling, and demonstrates Go's HTTP server capabilities with structured data handling and routing.",
    "project_live_link": "",
    "project_name": "GoLang-Practise-API",
    "project_repository": "https://github.com/MishraShardendu22/GoLang-Practise-API",
    "project_video": "",
    "skills": [
      "GoLang",
      "Gorilla Mux",
      "RESTful API",
      "HTTP Server",
      "JSON Handling",
      "CRUD Operations",
      "Error Handling"
    ],
    "small_description": "A RESTful API practice project built with Go and Gorilla Mux"
  },
  {
    "description": "GoLangToDoList is a full-stack todo application featuring a Go backend with hot reload using Air, and a TypeScript frontend built with ShadCN, Tailwind CSS, and Vite. The application provides CRUD operations for tasks with a responsive design and smooth animations using Framer Motion. It demonstrates modern full-stack development practices with separate frontend and backend repositories.",
    "project_live_link": "https://golangtodo-front.onrender.com/",
    "project_name": "GoLangToDoList",
    "project_repository": "https://github.com/MishraShardendu22/GoLangToDoList",
    "project_video": "",
    "skills": [
      "GoLang",
      "TypeScript",
      "ShadCN",
      "Tailwind CSS",
      "Vite",
      "Framer Motion",
      "Air (Hot Reload)",
      "Full-Stack Development",
      "CRUD Operations"
    ],
    "small_description": "A full-stack todo application with Go backend and TypeScript frontend"
  },
  {
    "description": "GoLangWebScrapper is a Go-based web scraping application that extracts book information from BooksToScrape.com. It uses the Colly framework for efficient web scraping, handles pagination automatically, and exports the scraped data (book titles and prices) to a CSV file. The application demonstrates web scraping best practices including domain restrictions, error handling, and structured data extraction.",
    "project_live_link": "",
    "project_name": "GoLangWebScrapper",
    "project_repository": "https://github.com/MishraShardendu22/GoLangWebScrapper",
    "project_video": "",
    "skills": [
      "GoLang",
      "Colly",
      "Web Scraping",
      "CSV Export",
      "HTTP Requests",
      "HTML Parsing",
      "Data Extraction"
    ],
    "small_description": "A Go web scraper for extracting book data and exporting to CSV"
  },
  {
    "description": "Google-Docs-LLD-Project is a C++ implementation of a document editor that demonstrates several key design patterns and object-oriented principles. The project uses the Composite Pattern for document elements, Strategy Pattern for persistence strategies, and follows SOLID principles. It supports text, images, line breaks, and tab spaces, with extensible storage options including file and database persistence.",
    "project_live_link": "",
    "project_name": "Google-Docs-LLD-Project",
    "project_repository": "https://github.com/MishraShardendu22/Google-Docs-LLD-Project",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Composite Pattern",
      "Strategy Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ implementation of Google Docs-like document editor using design patterns"
  },
  {
    "description": "Google-Trends is a Go CLI application that fetches and parses trending search topics from Google Trends RSS feeds. It uses the req package for HTTP requests, parses XML data to extract trend information including titles, traffic estimates, article links, and news sources. The application is structured with separate modules for data fetching and type definitions, demonstrating clean Go architecture for RSS feed processing.",
    "project_live_link": "",
    "project_name": "Google-Trends",
    "project_repository": "https://github.com/MishraShardendu22/Google-Trends",
    "project_video": "",
    "skills": [
      "GoLang",
      "RSS Parsing",
      "XML Processing",
      "HTTP Requests",
      "CLI Application",
      "Data Fetching",
      "Struct Definitions"
    ],
    "small_description": "A Go CLI tool for parsing Google Trends RSS feeds"
  },
  {
    "description": "GraphQL-Project-Management is a comprehensive project management system built with GraphQL, React, and Express. It features real-time project tracking, team collaboration tools, and efficient data fetching using Apollo Client. The application uses Vite for fast development, Tailwind CSS and Bootstrap for responsive design, and is deployed on Render. It demonstrates modern full-stack development with GraphQL for optimized data queries and mutations.",
    "project_live_link": "https://project-management-shardendumishra.onrender.com",
    "project_name": "GraphQL-Project-Management",
    "project_repository": "https://github.com/MishraShardendu22/GraphQL-Project-Management",
    "project_video": "https://www.youtube.com/watch?v=kMaic8EKvo8",
    "skills": [
      "GraphQL",
      "React",
      "Express",
      "Apollo Client",
      "Vite",
      "Tailwind CSS",
      "Bootstrap",
      "Node.js",
      "Real-time Updates",
      "Project Management"
    ],
    "small_description": "A full-stack project management system using GraphQL and React"
  },
  {
    "description": "Notification-System-LLD is a comprehensive C++ implementation of a notification system that demonstrates multiple design patterns. It uses the Observer Pattern for notification distribution, Decorator Pattern for adding features like timestamps and signatures, Strategy Pattern for different notification delivery methods (Email, SMS, Popup), and Singleton Pattern for the notification service. The system supports extensible notification strategies and follows SOLID principles for maintainable code.",
    "project_live_link": "",
    "project_name": "Notification-System-LLD",
    "project_repository": "https://github.com/MishraShardendu22/Notification-System-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Observer Pattern",
      "Decorator Pattern",
      "Strategy Pattern",
      "Singleton Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ notification system implementing multiple design patterns for extensible messaging"
  },
  {
    "description": "PaymentGateway-LLD is a comprehensive C++ implementation of a payment gateway system that demonstrates several design patterns. It uses the Template Method Pattern for defining payment flow, Strategy Pattern for different banking systems, Proxy Pattern for retry mechanisms, Factory Pattern for gateway creation, and multiple Singleton patterns for services. The system supports multiple payment gateways (Paytm, Razorpay) with validation, initiation, and confirmation steps, following SOLID principles.",
    "project_live_link": "",
    "project_name": "PaymentGateway-LLD",
    "project_repository": "https://github.com/MishraShardendu22/PaymentGateway-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Template Method Pattern",
      "Strategy Pattern",
      "Proxy Pattern",
      "Factory Pattern",
      "Singleton Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ payment gateway system implementing multiple design patterns for payment processing"
  },
  {
    "description": "SnakesAndLadder-LLD is a comprehensive C++ implementation of the classic Snakes and Ladders board game that demonstrates several design patterns. It uses the Observer Pattern for game notifications, Strategy Pattern for different board setup strategies (Random, Custom, Standard), Factory Pattern for game creation, and Template Method Pattern for game rules. The system supports multiple difficulty levels, custom board configurations, and follows SOLID principles for extensible game mechanics.",
    "project_live_link": "",
    "project_name": "SnakesAndLadder-LLD",
    "project_repository": "https://github.com/MishraShardendu22/SnakesAndLadder-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Observer Pattern",
      "Strategy Pattern",
      "Factory Pattern",
      "Template Method Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ implementation of Snakes and Ladders game using multiple design patterns"
  },
  {
    "description": "Spotify-LLD is a comprehensive C++ implementation of a music player system that demonstrates several design patterns. It uses the Adapter Pattern for different audio output devices (Bluetooth, Wired, Headphones), Strategy Pattern for different play strategies (Sequential, Random, Custom Queue), Factory Pattern for device creation, and Facade Pattern for simplified client interface. The system supports playlist management, multiple device types, and various playback strategies, following SOLID principles for extensible audio system design.",
    "project_live_link": "",
    "project_name": "Spotify-LLD",
    "project_repository": "https://github.com/MishraShardendu22/Spotify-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Adapter Pattern",
      "Strategy Pattern",
      "Factory Pattern",
      "Facade Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism",
      "Smart Pointers"
    ],
    "small_description": "A C++ music player system implementing multiple design patterns for audio playback"
  },
  {
    "description": "TicTacToe-LLD is a C++ implementation of the classic Tic Tac Toe game that demonstrates object-oriented design principles and design patterns. It uses the Observer Pattern for game notifications, Strategy Pattern for different game rules, Factory Pattern for game creation, and follows SOLID principles. The system supports multiple players, customizable board sizes, and extensible rule sets for different game variations.",
    "project_live_link": "",
    "project_name": "TicTacToe-LLD",
    "project_repository": "https://github.com/MishraShardendu22/TicTacToe-LLD",
    "project_video": "https://www.youtube.com/watch?v=5EjkDbj_ykk",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Observer Pattern",
      "Strategy Pattern",
      "Factory Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ implementation of Tic Tac Toe game using design patterns and OOP principles"
  },
  {
    "description": "Tinder-LLD is a comprehensive C++ implementation of a dating application that demonstrates several design patterns. It uses the Observer Pattern for notifications, Strategy Pattern for different matching algorithms (Basic, Interests-based, Location-based), Factory Pattern for matcher creation, and Singleton Pattern for services. The system supports user profiles, location-based matching, chat functionality, swipe mechanics, and follows SOLID principles for extensible dating platform design.",
    "project_live_link": "",
    "project_name": "Tinder-LLD",
    "project_repository": "https://github.com/MishraShardendu22/Tinder-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Observer Pattern",
      "Strategy Pattern",
      "Factory Pattern",
      "Singleton Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism",
      "Smart Pointers"
    ],
    "small_description": "A C++ dating app system implementing multiple design patterns for user matching and communication"
  },
  {
    "description": "Zepto-LLD is a comprehensive C++ implementation of a Zepto-like hyperlocal delivery system that demonstrates several design patterns. It uses the Factory Pattern for product creation, Strategy Pattern for inventory replenishment, Singleton Pattern for managers, and follows SOLID principles. The system supports inventory management, dark store operations, user carts, order placement, and delivery partner assignment, providing a modular and extensible architecture for delivery platforms.",
    "project_live_link": "",
    "project_name": "Zepto-LLD",
    "project_repository": "https://github.com/MishraShardendu22/Zepto-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Factory Pattern",
      "Strategy Pattern",
      "Singleton Pattern",
      "Abstract Classes",
      "Virtual Functions",
      "Inheritance",
      "Polymorphism"
    ],
    "small_description": "A C++ implementation of a Zepto-like delivery system using multiple design patterns"
  },
  {
    "description": "Zomato-LLD is a comprehensive C++ implementation of a Zomato-like food delivery system that demonstrates several design patterns. It uses the Strategy Pattern for different payment methods (Credit Card, UPI), Factory Pattern for order creation (Now vs Scheduled), Inheritance for different order types (Delivery vs Pickup), and follows SOLID principles. The system supports restaurant management, user carts, order processing, payment handling, and notification services, providing a modular architecture for food delivery platforms.",
    "project_live_link": "",
    "project_name": "Zomato-LLD",
    "project_repository": "https://github.com/MishraShardendu22/Zomato-LLD",
    "project_video": "",
    "skills": [
      "C++",
      "System Design",
      "Low-Level Design",
      "Object-Oriented Programming (OOP)",
      "SOLID Principles",
      "Strategy Pattern",
      "Factory Pattern",
      "Inheritance",
      "Abstract Classes",
      "Virtual Functions",
      "Polymorphism",
      "Smart Pointers"
    ],
    "small_description": "A C++ implementation of a Zomato-like food delivery system using multiple design patterns"
  },
  {
    "description": "Cloudinary SaaS Application is a modern web platform that enables users to upload, resize, and manage images and videos. It features Cloudinary AI for video processing, image resizing for social media, and secure authentication via Clerk. Built with Next.js, TypeScript, Tailwind CSS, and Prisma ORM, the app offers a responsive, user-friendly interface and seamless media management capabilities.",
    "project_live_link": "https://cloudianry-saas.vercel.app",
    "project_name": "cloudianry-saas",
    "project_repository": "https://github.com/MishraShardendu22/cloudianry-saas",
    "project_video": "",
    "skills": [
      "Next.js",
      "React",
      "TypeScript",
      "Tailwind CSS",
      "Prisma",
      "Neon",
      "Cloudinary",
      "Clerk",
      "Axios",
      "DaisyUI",
      "Next-Cloudinary",
      "React Hot Toast",
      "React Toastify"
    ],
    "small_description": "A SaaS platform for image and video upload, resizing, and management with Cloudinary integration"
  },
  {
    "description": "frontend-neuro-assist-v2 is a modern React application built with TypeScript and Vite, featuring a comprehensive UI component library using Radix UI, Material-UI, and Tailwind CSS. The project includes PWA capabilities, image editing functionality with Filestack, advanced form handling, and state management with Zustand. It supports responsive design, animations with Framer Motion, and includes various UI components for building sophisticated user interfaces.",
    "project_live_link": "https://neuro-assist-v2.vercel.app",
    "project_name": "frontend-neuro-assist-v2",
    "project_repository": "https://github.com/MishraShardendu22/frontend-neuro-assist-v2",
    "project_video": "",
    "skills": [
      "React",
      "TypeScript",
      "Vite",
      "Tailwind CSS",
      "Radix UI",
      "Material-UI",
      "Zustand",
      "React Hook Form",
      "Framer Motion",
      "PWA",
      "Filestack",
      "Axios",
      "React Router",
      "Embla Carousel",
      "DaisyUI"
    ],
    "small_description": "A React-based frontend application with comprehensive UI components and PWA capabilities"
  },
  {
    "project_name": "ScrollHub",
    "small_description": "An ultimate shorts platform with AI-driven recommendations and seamless scrolling experience for productivity-focused content",
    "description": "ScrollHub is a Next.js-based shorts platform that provides the best scrolling experience with an algorithm designed to encourage productivity. It features AI-driven recommendations and a seamless interface where users can effortlessly upload and watch short videos while staying focused. The platform includes aggressive upload capabilities, high SEO optimization, and a highly secure backend with AI model integration trained on social media wellness datasets for better content curation. Users can upload videos, watch content with seamless scrolling, and benefit from AI-powered content recommendations.",
    "skills": ["Next.js", "React", "TypeScript", "MongoDB", "Mongoose", "Next-Auth", "bcryptjs", "ImageKit", "Tailwind CSS", "ShadCN UI", "DaisyUI", "Framer Motion", "Google Generative AI", "Postman", "RESTful APIs", "Authentication", "Video Upload", "Video Streaming", "AI Integration", "SEO Optimization", "Responsive Design", "Database Design", "API Development", "Full Stack Development"],
    "project_repository": "https://github.com/MishraShardendu22/Scroll-Hub",
    "project_live_link": "https://scroll-hub.vercel.app/",
    "project_video": ""
  }
]